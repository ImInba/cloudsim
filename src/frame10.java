
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User112
 */
public class frame10 extends javax.swing.JFrame {

    /**
     * Creates new form frame10
     */
    Connection con;
    Statement st;
    ResultSet rs;
    ArrayList<Integer> minthres = new ArrayList<Integer>();
    ArrayList<Integer> overutil = new ArrayList<Integer>();
    ArrayList<Integer> underutil = new ArrayList<Integer>();
    ArrayList<Integer> maxthres = new ArrayList<Integer>();

    public frame10() {
        initComponents();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb", "root", "root");
            st = con.createStatement();
            try{
            st.executeUpdate("create table powenergy (Jobid int(10),jobsize int(100),vmalloted varchar(100),exectime int(100),power Double, energy Double,cost Double )");
            }
            catch(Exception e){
            }
            try{
            st.executeUpdate("create table overutil(vmid int(50),capacity int(100),status varchar(100))");
            }
            catch(Exception e){
            }
            try{
            st.executeUpdate("create table underutil(vmid int(50),capacity int(100),status varchar(110))");
            }
            catch(Exception e){
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton4.setText("underutilized VMs");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, 130, 30));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 580, 330));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Profit/Resource Availability Maximization  on Confederated Cloud Environment");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 590, 50));

        jButton3.setText(" Compute Threshold");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 130, 30));

        jButton1.setText("Power & Energy");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 130, 30));

        jButton5.setText("Next");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 140, 70, 30));

        jButton7.setText("overutilized Vms");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, 120, 30));

        jButton8.setText("Identify vm");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 130, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            jTextArea1.setText("");
            int res = 0;
            jTextArea1.append("Based on the threshold level identifying the underutilized vm to be migrated \n");
            ArrayList<Integer> list = new ArrayList<Integer>();
            Statement sr = con.createStatement();
            ResultSet rt2 = sr.executeQuery("select distinct(allotedvm) from cloudlet where not allotedvm='vm not alloted'");
            while (rt2.next()) {

                String l = rt2.getString(1);
                l = l.replace("vm", "");
                System.out.println("vmind" + l);
                int vmid = Integer.parseInt(l);
                list.add(vmid);
            }

            System.out.println("VMid list" + list);
            System.out.println("vmidlist size" + list.size());

            for (int i = 0; i < list.size(); i++) {


                Statement st = con.createStatement();
                ResultSet rt = st.executeQuery("select minthres,maxthres from vmtable where vmid='" + list.get(i) + "'");
                while (rt.next()) {
                    System.out.println(rt.getInt(1));
                    System.out.println(rt.getInt(2));
                    minthres.add(rt.getInt(1));
                    maxthres.add(rt.getInt(2));
                }
            }
            System.out.println("Minthres" + minthres);
            System.out.println("Maxthres" + maxthres);
            System.out.println("list():" + list.size());
            jTextArea1.append("vmid\tMinthres\t Remainincap\t result\t reamark\n");
            for (int i = 0; i < list.size(); i++) {
                int mithre = minthres.get(i);
                int mathre = maxthres.get(i);
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("select vmid,capacity from vtable where vmid='" + list.get(i) + "'");
                while (rs.next()) {
                    int thr = minthres.get(i);
                    int id = rs.getInt(1);
                    int remcap = rs.getInt(2);
                  
//                    if(remcap< mithre)
//                    {
//                          jTextArea1.append(id + "\t" + mithre + "\t" + remcap + "\t" + res + "\t" + id + " over utilized\n");
//                        overutil.add(id);
//                        Statement sy = con.createStatement();
//                        sy.executeUpdate("insert into overutil values('" + id + "','"+remcap+"','*')");
//                  
//                    }
                    if (remcap > mathre) {
                        res=remcap-mathre;
                        jTextArea1.append(id + "\t" + mathre + "\t" + remcap + "\t" + res + "\t" + id + " under utilized\n");
                        underutil.add(id);
                        Statement sy = con.createStatement();
                        sy.executeUpdate("insert into underutil values('" + id + "','"+remcap+"','*')");
                    }

                }


            }
            System.out.println("vm over utilized is" + overutil);
            System.out.println("vm under utilized is" + underutil);
//  under utilization
              Statement sj = con.createStatement();
            ResultSet rt = sj.executeQuery("select * from underutil");
            while (rt.next()) {
                int id = rt.getInt(1);
                int threscap=rt.getInt(2);
                String v = "vm" + id;
                int flag=0;
                jTextArea1.append("Jobs alloted in under utilized " + v + "\n");
                jTextArea1.append("jobId\tbrokerid\tJobSize\tPriority\tVmalloted\n");
                Statement sry = con.createStatement();
                ResultSet rs = sry.executeQuery("select * from cloudlet where allotedvm='" + v + "' order by filesize DESC");
                while (rs.next()) {
                    int jid = rs.getInt(1);
                    int brid = rs.getInt(2);
                    int jsize = rs.getInt(4);
                    int val = rs.getInt(7);
                    String alloted = rs.getString(8);
                 System.out.println(jid + "\t" + brid + "\t" + jsize + "\t" + val + "\t" + alloted);
                    jTextArea1.append(jid + "\t" + brid + "\t" + jsize + "\t" + val + "\t" + alloted + "\n");
                    jTextArea1.append("Vms suggested for migration\nvmid\tcapcaity\n");
                    Statement su = con.createStatement();
                    ResultSet ri = su.executeQuery("select * from vtable where brokerid='" + brid + "' and not vmid='"+id+"' order by capacity DESC");
                    while (ri.next()) {
                        int vmid=ri.getInt(1);
                        if(!underutil.contains(vmid))
                       
                        {
                            
                        int cap=ri.getInt(8);
                        int minthres=0;
                          Statement smt = con.createStatement();
                          ResultSet rmt = smt.executeQuery("select minthres from vmtable where vmid='" + vmid + "' ");
                          while(rmt.next())
                          {
                              minthres=rmt.getInt(1);
                          }
                        jTextArea1.append(vmid+"\t"+cap+"\n");
                        int remcap=cap-jsize;
                        if(jsize<cap && remcap>minthres)
                        {
                            
                            jTextArea1.append("\nJob:"+jid+" is migrated to vm"+vmid+" from "+v+" \n");
                            jTextArea1.append("Vm"+v+" is set to sleep mode");
                            Statement sy=con.createStatement();
                            String str="vm"+vmid;
                            sy.executeUpdate("update cloudlet set allotedvm='"+str+"' where id='"+jid+"'");
                            sy.executeUpdate("update vtable set capacity='"+remcap+"' where vmid='"+vmid+"'");
                            threscap=threscap+jsize;
                            sy.executeUpdate("update vtable set capacity='"+threscap+"' where vmid='"+id+"'");
                            String stat="migrated";
                            flag=1;   
                            sy.executeUpdate("update underutil set status='"+stat+"' where vmid='"+id+"'");
                        }
                if(flag==1) break;
                }
                    }
                    //else for checking in vmid is same as migrating
                }
            }
             } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            jTextArea1.setText("");
            jTextArea1.append("Calculating the threshold of all the virtual machines\n");
            jTextArea1.append("Vmid\t Capacity\t Minthreshold\t Maxthreshold\n");
            jTextArea1.append("===================================================================\n");
            System.out.println("vmid\tcap\tmin\tmax");
            ResultSet rs = st.executeQuery("select vmid,capacity from vmtable");
            while (rs.next()) {
                int id = rs.getInt(1);
                int cap = rs.getInt(2);
                int min = cap / 100;
                min = min * 10;
                minthres.add(min);
                int max = cap / 100;
                max = max * 90;
                maxthres.add(max);
                System.out.println(id + "\t" + cap + "\t" + min + "\t" + max);
                jTextArea1.append(id + "\t" + cap + "\t" + min + "\t" + max + "\n\n");

                Statement str = con.createStatement();
                str.executeUpdate("update vmtable set minthres='" + min + "', maxthres='" + max + "' where vmid='" + id + "'");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            jTextArea1.setText("");
            jTextArea1.append("JobId\tPower\tEnergy\n");
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from cloudlet");
            while (rs.next()) {
                int jid = rs.getInt(1);
                Double jsize = rs.getDouble(4);
                String vmalt = rs.getString(8);
                int exect = rs.getInt(9);
                Double power = jsize / (exect * 1000);
                //  power=(double)Math.round(power * 1000d) / 1000d;
                Double energy = power * exect;
                //     energy=(double)Math.round(power * 1000d) / 1000d;
                System.out.println(jid + "\t" + power + "\t" + energy + "");
                jTextArea1.append(jid + "\t" + power + "\t" + energy + "\n");
                Statement syt = con.createStatement();
                syt.executeUpdate("insert into powenergy values('" + jid + "','" + jsize + "','" + vmalt + "','" + exect + "','" + power + "','" + energy + "','0')");
            }
            jTextArea1.append("JobId\tVmid\tMips\tplaced in\t CostperMi\t CostofJob\n");
            Statement st1 = con.createStatement();
            ResultSet rs1 = st1.executeQuery("select * from cloudlet where not allotedvm='vm not alloted'");
            while (rs1.next()) {
                int jid = rs1.getInt(1);
                String vmalot = rs1.getString(8);
                vmalot = vmalot.replace("vm", "");
                int vmid = Integer.parseInt(vmalot);
                Statement sr = con.createStatement();
                ResultSet rt = sr.executeQuery("select * from vtable where vmid='" + vmid + "'");
                while (rt.next()) {
                    int mips = rt.getInt(3);
                    String placed = rt.getString(6);
                    Statement sy = con.createStatement();
                    ResultSet rh = sy.executeQuery("select * from datacenter where dcname='" + placed + "'");
                    while (rh.next()) {
                        Double costpermi = rh.getDouble(4);
                        Double costcalculated = costpermi * mips;
                        System.out.println(jid + "\t" + vmid + "\t" + mips + "\t" + placed + "\t" + costpermi + "\t" + costcalculated);
                        jTextArea1.append(jid + "\t" + vmid + "\t" + mips + "\t" + placed + "\t" + costpermi + "\t" + costcalculated + "\n");
                        Statement sy1 = con.createStatement();
                        sy1.executeUpdate("update powenergy set cost='" + costcalculated + "' where jobid='" + jid + "'");
                    }
                }
            }



        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        comparisons cp=new comparisons();
        cp.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:

        try {
            
            jTextArea1.setText("");
            jTextArea1.append("Displaying Overutilized Virtual Machines\n");
            Statement sj = con.createStatement();
            ResultSet rt = sj.executeQuery("select * from overutil");
            while (rt.next()) {
                int id = rt.getInt(1);
                int threscap=rt.getInt(2);
                int flag=0;
                String v = "vm" + id;
                jTextArea1.append("Jobs alloted in over utilized " + v + "\n");
                jTextArea1.append("jobId\tbrokerid\tJobSize\tPriority\tVmalloted\n");
                Statement sr = con.createStatement();
                ResultSet rs = sr.executeQuery("select * from cloudlet where allotedvm='" + v + "' order by filesize ASC");
                while (rs.next()) {
                    int jid = rs.getInt(1);
                    int brid = rs.getInt(2);
                    int jsize = rs.getInt(4);
                    int val = rs.getInt(7);
                    String alloted = rs.getString(8);
                    System.out.println(jid + "\t" + brid + "\t" + jsize + "\t" + val + "\t" + alloted);
                    jTextArea1.append(jid + "\t" + brid + "\t" + jsize + "\t" + val + "\t" + alloted + "\n");
                    jTextArea1.append("Vms suggested for migration\nvmid\tcapcaity\n");
                    Statement su = con.createStatement();
                    ResultSet ri = su.executeQuery("select * from vtable where brokerid='" + brid + "' order by capacity DESC");
                    while (ri.next()) {
                        int vmid=ri.getInt(1);
                        int cap=ri.getInt(8);
                        int minthres=0;
                          Statement smt = con.createStatement();
                          ResultSet rmt = smt.executeQuery("select minthres from vmtable where vmid='" + vmid + "' ");
                          while(rmt.next())
                          {
                              minthres=rmt.getInt(1);
                          }
                        jTextArea1.append(vmid+"\t"+cap+"\n");
                        int remcap=cap-jsize;
                        if(jsize<cap && remcap>minthres)
                        {
                            
                            jTextArea1.append("\nJob:"+jid+" is migrated to vm"+vmid+" from "+v+" in same datacenter\n");
                            Statement sy=con.createStatement();
                            String str="vm"+vmid;
                            sy.executeUpdate("update cloudlet set allotedvm='"+str+"' where id='"+jid+"'");
                            sy.executeUpdate("update vtable set capacity='"+remcap+"' where vmid='"+vmid+"'");
                            threscap=threscap+jsize;
                            sy.executeUpdate("update vtable set capacity='"+threscap+"' where vmid='"+id+"'");
                           flag=1; 
                           String stat="migrated";
                           sy.executeUpdate("update overutil set status='"+stat+"' where vmid='"+id+"'");
                        }
                        if(flag==1)break;
                    }
                    if(flag==0)
                    {
                        jTextArea1.append("Job not Migrated, No Available VMs\n");
                    }
               if(flag==1) break;
                }
            }
            }  catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
         try {
            jTextArea1.setText("");
            int res = 0;
            jTextArea1.append("Based on the threshold level identifying the underutilized vm to be migrated \n");
            ArrayList<Integer> list = new ArrayList<Integer>();
            Statement sr = con.createStatement();
            ResultSet rt2 = sr.executeQuery("select distinct(allotedvm) from cloudlet where not allotedvm='vm not alloted'");
            while (rt2.next()) {

                String l = rt2.getString(1);
                l = l.replace("vm", "");
                System.out.println("vmind" + l);
                int vmid = Integer.parseInt(l);
                list.add(vmid);
            }

            System.out.println("VMid list" + list);
            System.out.println("vmidlist size" + list.size());

            for (int i = 0; i < list.size(); i++) {


                Statement st = con.createStatement();
                ResultSet rt = st.executeQuery("select minthres,maxthres from vmtable where vmid='" + list.get(i) + "'");
                while (rt.next()) {
                    System.out.println(rt.getInt(1));
                    System.out.println(rt.getInt(2));
                    minthres.add(rt.getInt(1));
                    maxthres.add(rt.getInt(2));
                }
            }
            System.out.println("Minthres" + minthres);
            System.out.println("Maxthres" + maxthres);
            System.out.println("list():" + list.size());
            jTextArea1.append("vmid\tMinthres\t Remainincap\t result\t reamark\n");
            for (int i = 0; i < list.size(); i++) {
                int mithre = minthres.get(i);
                int mathre = maxthres.get(i);
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("select vmid,capacity from vtable where vmid='" + list.get(i) + "'");
                while (rs.next()) {
                    int thr = minthres.get(i);
                    int id = rs.getInt(1);
                    int remcap = rs.getInt(2);
                  
                    if(remcap< mithre)
                    {
                          jTextArea1.append(id + "\t" + mithre + "\t" + remcap + "\t" + res + "\t" + id + " over utilized\n");
                        overutil.add(id);
                        Statement sy = con.createStatement();
                        sy.executeUpdate("insert into overutil values('" + id + "','"+remcap+"','*')");
                  
                    }
                    if (remcap > mathre) {
                        jTextArea1.append(id + "\t" + mathre + "\t" + remcap + "\t" + res + "\t" + id + " under utilized\n");
//                        underutil.add(id);
//                        Statement sy = con.createStatement();
//                        sy.executeUpdate("insert into underutil values('" + id + "','"+remcap+"','*')");
                    }

                }


            }
            System.out.println("vm over utilized is" + overutil);
            System.out.println("vm under utilized is" + underutil);


        } catch (Exception e) {
            //e.printStackTrace();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame10().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
