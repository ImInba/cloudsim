
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.cloudbus.cloudsim.Datacenter;
import org.cloudbus.cloudsim.DatacenterCharacteristics;
import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.Storage;
import org.cloudbus.cloudsim.VmAllocationPolicySimple;
import org.cloudbus.cloudsim.VmSchedulerSpaceShared;
import org.cloudbus.cloudsim.lists.PeList;
import org.cloudbus.cloudsim.power.PowerDatacenter;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User112
 */
public class frame2 extends javax.swing.JFrame {

    /**
     * Creates new form frame2
     */
    public static Connection con;
    public static PowerDatacenter dcenter[];
    public static String dname;
    public static DefaultTableModel model = new DefaultTableModel();
    public static Statement str;
    public static ArrayList<Integer> mipslist = new ArrayList<Integer>();

    public frame2() throws SQLException{
        initComponents();
        jTextField1.setText("");
        Statement st = con.createStatement();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb", "root", "root");
            st.executeUpdate("create table datacenter(dcname varchar(50),cperbw double,cpermem double, cpermi double, cpersec double,cperstrg double,Mips int(100),mips1Pe int(100),nofPe int(10), nofHost int(10), federation varchar(100))");
            st.executeUpdate("create table dchost(dcname varchar(50),nofHost int(20),hostid int(20), ram int(20), bw int(20), status varchar(100)) ");
            //"No.of Machines", "HostId", "No.of PhyicalMachine", "RAM", "BW"};
            st.executeUpdate("create table datacenterhost(dcname varchar(50),nofHost int(20),hostid int(20), ram int(20), bw int(20), status varchar(100)) ");
            //"No.of Machines", "HostId", "No.of PhyicalMachine", "RAM", "BW"};
        } catch (Exception e) {
            st.execute("delete from dchost");
            st.execute("delete from datacenter");
            //e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(650, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Enter the No .of Data Centers ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 160, 30));

        jTextField1.setText("jTextField1");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, 90, 30));

        jButton1.setText("Create DataCenters");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 160, 30));

        jButton2.setText("Next>>");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 170, 100, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Data Center Creation:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 130, 40));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 570, 300));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Profit/Resource Availability Maximization  on Confederated Cloud Environment");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 570, 50));

        jButton3.setText("View Characteristics");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 170, 180, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {

            String input = jTextField1.getText();
            int nofdcenter = Integer.parseInt(input);
            dcenter = (PowerDatacenter[]) new PowerDatacenter[nofdcenter];
            String[] title = {"Datacenter Rack", "No.of Host", "HostId", "RAM", "BW"};

            jTable2.setModel(model);
            for (int i = 0; i < title.length; i++) {
                model.addColumn(title[i]);
            }
            System.out.println("Datacenter Name" + "\t" + "No of host" + "\t" + "host Id" + "\t" + "ram" + "\t" + "bw\n");
            for (int i = 0; i < nofdcenter; i++) {

                dname = "Dcenter" + i;
                dcenter[i] = (PowerDatacenter) createDatacenter("Dcenter" + i);
            }
            JOptionPane.showMessageDialog(null, nofdcenter + " Data centers created");
            // federate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //        testframe f=new testframe();
//        f.setVisible(true);
        frame3 b3 = new frame3();
        b3.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            model.setColumnCount(0);
            model.setRowCount(0);
            String[] title = {"Datacenter", "Cost/Bw", "Cost/Memy", "Cost/Mi", "Cost/Sec", "Cost/Storage", "Mips", "Mips/Pe", "No.ofPe", "No.of Host"};

            jTable2.setModel(model);
            for (int i = 0; i < title.length; i++) {
                model.addColumn(title[i]);
            }
            Statement str = con.createStatement();
            ResultSet rs = str.executeQuery("select * from datacenter");
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10)});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    public static void federate() {
        try {
            String l = "low";
            String h = "high";
            String m = "medium";
            //          st=con.createStatement();
            ResultSet rs;
            rs = str.executeQuery("select * from datacenter");
            while (rs.next()) {
                int maxbw = 25000;
                int minbw = 10000;
                int maxram = 2048;
                int minram = 512;
                int minPe = 1;
                int maxPe = 4;
                String dcname = rs.getString(1);
                int hostid = rs.getInt(3);
                int nop = rs.getInt(4);
                int ram = rs.getInt(5);
                int bw = rs.getInt(6);
                if (ram == maxram) {
                    System.out.println(dcname + ":::" + hostid + "==>" + h);
                } else if (ram == minram) {
                    System.out.println(dcname + ":::" + hostid + "==>" + l);
                } else {
                    System.out.println(dcname + ":::" + hostid + "==>" + m);
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    private static Datacenter createDatacenter(String name) throws SQLException {
        int res;

        List<Host> hostList = new ArrayList<Host>();
        List<Pe> peList = new ArrayList<Pe>();
        //NO. of pes
        Random r = new Random();
        int mips, nMip, nPe;

        do {
            nPe = r.nextInt(5);
        } while (nPe < 1);
        res = 0;
        for (int i = 0; i < nPe; i++) {
            do {
                nMip = r.nextInt(2000);

            } while (nMip < 300);
            mips = nMip;
//           System.out.println("mips value"+mips);
            mipslist.add(mips);
            peList.add(new Pe(i, new PeProvisionerSimple(mips)));
            res = res + mips;
            //          System.out.println(res);
        }

        //No. of machines
        int nMachines;
        do {
            nMachines = r.nextInt(5);
        } while (nMachines < 2);
        int[] rams = {512, 1024, 2048, 4086};
        int[] bws = {10000, 15000, 20000, 25000};
        int nRam, hostId, ram, bw, nBw;
        long storage;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = (Connection) (java.sql.Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb", "root", "root");
            Statement st = con.createStatement();
            //st.execute("delete from datacenterhost");
            //st.execute("delete from dchost");

            for (int i = 0; i < nMachines; i++) {
                nRam = r.nextInt(4);
                nBw = r.nextInt(4);
                hostId = i;
                ram = rams[nRam]; //host memory (MB)
                storage = 1000000; //host storage
                bw = bws[nBw];
                model.addRow(new Object[]{dname, nMachines, hostId, ram, bw});

                System.out.println(dname + "\t" + nMachines + "\t\t" + hostId + "\t\t" + ram + "\t" + bw + "\n");
                st.executeUpdate("INSERT INTO datacenterhost VALUES('" + dname + "','" + nMachines + "','" + hostId + "','" + ram + "','" + bw + "','*')");
                st.executeUpdate("INSERT INTO dchost VALUES('" + dname + "','" + nMachines + "','" + hostId + "','" + ram + "','" + bw + "','*')");
                Host h = new Host(hostId,
                        new RamProvisionerSimple(ram),
                        new BwProvisionerSimple(bw),
                        storage,
                        peList,
                        new VmSchedulerSpaceShared(peList));
                hostList.add(h);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        String arch = "x86";      // system architecture
        String os = "Linux";          // operating system
        String vmm = "Xen";
        double time_zone = 10.0;         // time zone this resource located
        double cost = 3.0;              // the cost of using processing in this resource
        double costPerMem = 0.05;		// the cost of using memory in this resource
        double costPerStorage = 0.001;	// the cost of using storage in this resource
        double costPerBw = 0.1;			// the cost of using bw in this resource
        LinkedList<Storage> storageList = new LinkedList<Storage>();	//we are not adding SAN devices by now

        DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
                arch, os, vmm, hostList, time_zone, cost, costPerMem, costPerStorage, costPerBw);


        Statement sr = con.createStatement();
//        System.out.print("dc" + dname + "\t");
//        System.out.print("c/bw" + characteristics.getCostPerBw() + "\t");
//        System.out.print("c/mem" + characteristics.getCostPerMem() + "\t");
//        System.out.print("c/mi" + characteristics.getCostPerMi() + "\t");
//        System.out.print("c/sec" + characteristics.getCostPerSecond() + "\t");
//        System.out.print("c/stor" + characteristics.getCostPerStorage() + "\t");
//        System.out.print("mips" + characteristics.getMips() + "\t");
//        System.out.print("mips for onePe" + characteristics.getMipsOfOnePe() + "\t");
//        System.out.print("NofPe" + characteristics.getNumberOfPes() + "\t");
//        System.out.println("noof host" + characteristics.getNumberOfHosts() + "\t");

        sr.executeUpdate("insert into datacenter values('" + dname + "','" + characteristics.getCostPerBw() + "','" + characteristics.getCostPerMem() + "','" + characteristics.getCostPerMi() + "','" + characteristics.getCostPerSecond() + "','" + characteristics.getCostPerStorage() + "','" + characteristics.getMips() + "','" + characteristics.getMipsOfOnePe() + "','" + characteristics.getNumberOfPes() + "','" + characteristics.getNumberOfHosts() + "','*')");
        Datacenter datacenter = null;
        try {
            datacenter = new Datacenter(name, characteristics, new VmAllocationPolicySimple(hostList), storageList, 0);

        } catch (Exception e) {
            //e.printStackTrace();
        }
//
        return datacenter;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try{
                new frame2().setVisible(true);
                }
                catch(Exception e){
                    
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
