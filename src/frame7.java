
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User112
 */
public class frame7 extends javax.swing.JFrame {

    /**
     * Creates new form frame7
     */
    Statement st;
    Connection con;
    ArrayList<String> vmlist = new ArrayList<String>();
    ArrayList<Integer> dloadlist = new ArrayList<Integer>();
    public static ArrayList<String> dlist = new ArrayList<String>();

    public frame7() {
        initComponents();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb", "root", "root");
            st = con.createStatement();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Profit/Resource Availability Maximization  on Confederated Cloud Environment");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 570, 50));

        jButton4.setText("Load VMlist");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 110, 30));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 590, 360));

        jButton5.setText("placing virtual machine in Dc");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 220, 30));

        jButton1.setText("Next");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, 70, 30));

        jButton2.setText("Compute Capacity");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, 140, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            jTextArea1.setText("");
            Statement St = con.createStatement();
            ResultSet rs = St.executeQuery("select * from vtable");
            while (rs.next()) {
                String vmid = rs.getString(1);
                vmlist.add(vmid);
            }
            jTextArea1.append("Initializing....\n\nNo.of Vm's To be Placed are " + vmlist.size() + "\n\n");
            jTextArea1.append("Vm id" + vmlist + "\n");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try {

            //  load Federated Datacenters
            jTextArea1.setText("");
            ArrayList<String> fg = new ArrayList<String>();
            jTextArea1.append("Initializing...............\n\n");
            jTextArea1.append("Datacenter are Federated/grouped based on the Cost and executing Mips \n");
            Statement St1 = con.createStatement();
           /* ResultSet rs1 = St1.executeQuery("select fgroup,fid,wrkload from fload ");
            while (rs1.next()) {
                String fgp = rs1.getString(1);
                fg.add(fgp);
                String id = rs1.getString(2);
                dlist.add(id);
                int load = rs1.getInt(3);
                dloadlist.add(load);
            }

            System.out.println(fg);
            System.out.println(dlist);
            System.out.println(dloadlist);*/
           ResultSet rs1 = St1.executeQuery("select hostid,ram,bw from dchost");
           ArrayList<Integer> hostidlist = new ArrayList<>();
           ArrayList<Integer> hostramlist = new ArrayList<>();
           ArrayList<Integer> hostbwlist = new ArrayList<>();
           while(rs1.next()){
               int hostid = rs1.getInt(1);
               hostidlist.add(hostid);
               int hostram = rs1.getInt(2);
               hostramlist.add(hostram);
               int hostbw = rs1.getInt(3);
               hostbwlist.add(hostbw);
           }
            //Loading Virtual machines
            ArrayList<String> vmidlist = new ArrayList<>();
            ArrayList<Integer> vmramlist = new ArrayList<>();
            ArrayList<Integer> vmbwlist = new ArrayList<>();
            ArrayList<Integer> vmmipslist = new ArrayList<>();
            Statement St2 = con.createStatement();
            ResultSet rs2 = St2.executeQuery("select vmid,ram,bw,mips from vtable order by(ram) desc");
            while (rs2.next()) {
                String id = rs2.getString(1);
                vmidlist.add(id);
                int vmram = rs2.getInt(2);
                vmramlist.add(vmram);
                int vmbw = rs2.getInt(3);
                vmbwlist.add(vmbw);
                int vmmips = rs2.getInt(4);
                vmmipslist.add(vmmips);
            }
            System.out.println("vm id list" + vmidlist);
            System.out.println("vm load list" + vmramlist);
            System.out.println("host ram list" +hostramlist);
            jTextArea1.append("vm id list" + vmidlist + "\n");
            jTextArea1.append("vm load list" + vmramlist + "\n");
            System.out.println("VmId\tRam\tDatacenter\tHostId");
            jTextArea1.append("VmId\tRam\tDatacenter\tHostId\n");
            //Placing Vm's in the respective Datacenters
            float minPower = Float.MAX_VALUE;
            int allocHost = -1;
            for (int i = 0; i < vmramlist.size(); i++) {
                minPower = Float.MAX_VALUE;
                allocHost = -1;
                for(int j = 0;j<hostidlist.size();j++){
                    if(hostramlist.get(j)>=vmramlist.get(i)&&hostbwlist.get(j)>=vmbwlist.get(i)){
                        float u = (float)vmbwlist.get(i)/(float)hostbwlist.get(j);
                        float power = 0.7f*(float)hostbwlist.get(j)+0.3f*(u*(float)hostbwlist.get(j));
                        if(power<minPower){
                            minPower = power;
                            allocHost = j;
                        }
                    }
                }
                if(allocHost!=-1){
                    int ram = hostramlist.get(allocHost)-vmramlist.get(i);
                    int bw = hostbwlist.get(allocHost)-vmbwlist.get(i);
                    hostramlist.set(allocHost,ram);
                    hostbwlist.set(allocHost,bw);
                    Statement stmt = con.createStatement();
                    stmt.executeUpdate("insert into placement values('" + vmidlist.get(i) + "','" + vmramlist.get(i) + "','" + hostidlist.get(allocHost)+ "','" + hostidlist.get(allocHost) + "')");
                    jTextArea1.append(vmidlist.get(i) + "\t" + vmramlist.get(i) + "\t" + hostidlist.get(allocHost) + "\t" + hostidlist.get(allocHost) + "\n\n");
                }
            
                /*for (int j = 0; j < dloadlist.size(); j++) {
                    
                    if (vmramlist.get(i) < dloadlist.get(j) || vmramlist.get(i) == dloadlist.get(j)) {
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("select * from dchost where dcname='" + dlist.get(j) + "'");
                        while (rs.next()) {
                            String dc = rs.getString(1);
                            int hid = rs.getInt(3);
                            int ram = rs.getInt(4);
                            String fc = rs.getString(6);
                            if (vmramlist.get(i) == ram || vmramlist.get(i) < ram) {

                                System.out.println(vmidlist.get(i) + "\t" + vmramlist.get(i) + "\t" + dc + "\t" + hid);
                                jTextArea1.append(vmidlist.get(i) + "\t" + vmramlist.get(i) + "\t" + dc + "\t" + hid + "\n\n");
                                Statement stmt = con.createStatement();
                                stmt.executeUpdate("insert into placement values('" + vmidlist.get(i) + "','" + vmramlist.get(i) + "','" + dc + "','" + hid + "')");
                                ram = ram - vmramlist.get(i);
                                //  System.out.println("remaiming ram avaliabale is" + ram);
                                Statement st1 = con.createStatement();
                                String stat;
                                if (fc.equalsIgnoreCase("*")) {
                                    stat = "vm" + vmidlist.get(i) + "placed";
                                } else {
                                    stat = fc + "," + "vm" + vmidlist.get(i) + "placed";
                                }
                                st1.executeUpdate("update dchost set ram='" + ram + "'  , status= '" + stat + "'   where dcname='" + dc + "'and hostid='" + hid + "'");
                                st1.executeUpdate("update vtable set placed ='" + dc + "',status='ready' where vmid='" + vmidlist.get(i) + "'");
                                int fdc = dloadlist.get(j);
                                fdc = fdc - vmramlist.get(i);
                                dloadlist.set(j, fdc);
                                flag = 1;
                            }

                            if (flag == 1) {
                                break;
                            }
                        }
                    } else {
                        // System.out.println(vmramlist.get(i) + "is not suffieient in fdc" + j);
                        Statement st4 = con.createStatement();
                        st4.executeUpdate("update vtable set placed ='Not placed',status='Not Ready' where vmid='" + vmidlist.get(i) + "'");
                    }
                    if (flag == 1) {
                        break;
                    }
                } */

            }
        System.out.println("final load" + dloadlist);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        frame8 j8 = new frame8();
        j8.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            jTextArea1.setText("");
            jTextArea1.append("Vm Id\t Mips \t NofPe \t Bandwidth \t Capacity\n");
            jTextArea1.append("===========================================================================\n");
            int nofpe = 0;
            int cap = 0;
            Statement st = con.createStatement();
            ResultSet rst = st.executeQuery("select * from vtable");
            while (rst.next()) {
                int id = rst.getInt(1);
                int mips = rst.getInt(3);
                int bw = rst.getInt(5);
                String pl = rst.getString(6);
                Statement s = con.createStatement();
                ResultSet rsf = s.executeQuery("select nofpe from datacenter where dcname='" + pl + "'");
                while (rsf.next()) {
                    nofpe = rsf.getInt(1);
                }
                cap = (nofpe * mips) + bw;
                Statement sy = con.createStatement();
                sy.executeUpdate("update vtable set capacity ='" + cap + "' where vmid='" + id + "'");
                sy.executeUpdate("update vmtable set capacity ='" + cap + "' where vmid='" + id + "'");
                System.out.println(id + "\t" + mips + "\t" + nofpe + "\t" + bw + "\t" + cap);
                jTextArea1.append(id + "\t" + mips + "\t" + nofpe + "\t" + bw + "\t" + cap+"\n\n");

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame7.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame7.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame7.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame7.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame7().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
